// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  PaginationResponse,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './product_search_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Manages Products and ProductSets of reference images for use in product
 *  search. It uses the following resource model:
 *
 *  - The API has a collection of
 *  {@link google.cloud.vision.v1p4beta1.ProductSet|ProductSet} resources, named
 *  `projects/* /locations/* /productSets/*`, which acts as a way to put different
 *  products into groups to limit identification.
 *
 *  In parallel,
 *
 *  - The API has a collection of
 *  {@link google.cloud.vision.v1p4beta1.Product|Product} resources, named
 *    `projects/* /locations/* /products/*`
 *
 *  - Each {@link google.cloud.vision.v1p4beta1.Product|Product} has a collection of
 *  {@link google.cloud.vision.v1p4beta1.ReferenceImage|ReferenceImage} resources,
 *  named
 *    `projects/* /locations/* /products/* /referenceImages/*`
 * @class
 * @memberof v1p4beta1
 */
export class ProductSearchClient {
  private _descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  operationsClient: gax.OperationsClient;
  productSearchStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ProductSearchClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof ProductSearchClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof ProductSearchClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      productPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/products/{product}'
      ),
      productSetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/productSets/{product_set}'
      ),
      referenceImagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listProductSets: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'productSets'
      ),
      listProducts: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'products'
      ),
      listReferenceImages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'referenceImages'
      ),
      listProductsInProductSet: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'products'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const importProductSetsResponse = protoFilesRoot.lookup(
      '.google.cloud.vision.v1p4beta1.ImportProductSetsResponse'
    ) as gax.protobuf.Type;
    const importProductSetsMetadata = protoFilesRoot.lookup(
      '.google.cloud.vision.v1p4beta1.BatchOperationMetadata'
    ) as gax.protobuf.Type;
    const purgeProductsResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const purgeProductsMetadata = protoFilesRoot.lookup(
      '.google.cloud.vision.v1p4beta1.BatchOperationMetadata'
    ) as gax.protobuf.Type;

    this._descriptors.longrunning = {
      importProductSets: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importProductSetsResponse.decode.bind(importProductSetsResponse),
        importProductSetsMetadata.decode.bind(importProductSetsMetadata)
      ),
      purgeProducts: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        purgeProductsResponse.decode.bind(purgeProductsResponse),
        purgeProductsMetadata.decode.bind(purgeProductsMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.vision.v1p4beta1.ProductSearch',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.productSearchStub) {
      return this.productSearchStub;
    }

    // Put together the "service stub" for
    // google.cloud.vision.v1p4beta1.ProductSearch.
    this.productSearchStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.vision.v1p4beta1.ProductSearch'
          )
        : // tslint:disable-next-line no-any
          (this._protos as any).google.cloud.vision.v1p4beta1.ProductSearch,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const productSearchStubMethods = [
      'createProductSet',
      'listProductSets',
      'getProductSet',
      'updateProductSet',
      'deleteProductSet',
      'createProduct',
      'listProducts',
      'getProduct',
      'updateProduct',
      'deleteProduct',
      'createReferenceImage',
      'deleteReferenceImage',
      'listReferenceImages',
      'getReferenceImage',
      'addProductToProductSet',
      'removeProductFromProductSet',
      'listProductsInProductSet',
      'importProductSets',
      'purgeProducts',
    ];

    for (const methodName of productSearchStubMethods) {
      const innerCallPromise = this.productSearchStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        innerCallPromise,
        this._defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }

    return this.productSearchStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'vision.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'vision.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-vision',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates and returns a new ProductSet resource.
   *
   * Possible errors:
   *
   * * Returns INVALID_ARGUMENT if display_name is missing, or is longer than
   *   4096 characters.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which the ProductSet should be created.
   *
   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.
   * @param {google.cloud.vision.v1p4beta1.ProductSet} request.productSet
   *   Required. The ProductSet to create.
   * @param {string} request.productSetId
   *   A user-supplied resource id for this ProductSet. If set, the server will
   *   attempt to use this value as the resource id. If it is already in use, an
   *   error is returned with code ALREADY_EXISTS. Must be at most 128 characters
   *   long. It cannot contain the character `/`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
          | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.createProductSet(request, options, callback);
  }
  getProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      | protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets information associated with a ProductSet.
   *
   * Possible errors:
   *
   * * Returns NOT_FOUND if the ProductSet does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the ProductSet to get.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
          | protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      | protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IGetProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.getProductSet(request, options, callback);
  }
  updateProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Makes changes to a ProductSet resource.
   * Only display_name can be updated currently.
   *
   * Possible errors:
   *
   * * Returns NOT_FOUND if the ProductSet does not exist.
   * * Returns INVALID_ARGUMENT if display_name is present in update_mask but
   *   missing from the request or longer than 4096 characters.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.vision.v1p4beta1.ProductSet} request.productSet
   *   Required. The ProductSet resource which replaces the one on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The {@link google.protobuf.FieldMask|FieldMask} that specifies which fields to
   *   update.
   *   If update_mask isn't specified, all mutable fields are to be updated.
   *   Valid mask path is `display_name`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
          | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'product_set.name': request.productSet!.name || '',
    });
    this.initialize();
    return this._innerApiCalls.updateProductSet(request, options, callback);
  }
  deleteProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Permanently deletes a ProductSet. Products and ReferenceImages in the
   * ProductSet are not deleted.
   *
   * The actual image files are not deleted from Google Cloud Storage.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the ProductSet to delete.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.deleteProductSet(request, options, callback);
  }
  createProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates and returns a new product resource.
   *
   * Possible errors:
   *
   * * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096
   *   characters.
   * * Returns INVALID_ARGUMENT if description is longer than 4096 characters.
   * * Returns INVALID_ARGUMENT if product_category is missing or invalid.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which the Product should be created.
   *
   *   Format is
   *   `projects/PROJECT_ID/locations/LOC_ID`.
   * @param {google.cloud.vision.v1p4beta1.Product} request.product
   *   Required. The product to create.
   * @param {string} request.productId
   *   A user-supplied resource id for this Product. If set, the server will
   *   attempt to use this value as the resource id. If it is already in use, an
   *   error is returned with code ALREADY_EXISTS. Must be at most 128 characters
   *   long. It cannot contain the character `/`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProduct,
          | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.ICreateProductRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.createProduct(request, options, callback);
  }
  getProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest | undefined,
      {} | undefined
    ]
  >;
  getProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets information associated with a Product.
   *
   * Possible errors:
   *
   * * Returns NOT_FOUND if the Product does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the Product to get.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProduct,
          | protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      protosTypes.google.cloud.vision.v1p4beta1.IGetProductRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.getProduct(request, options, callback);
  }
  updateProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Makes changes to a Product resource.
   * Only the `display_name`, `description`, and `labels` fields can be updated
   * right now.
   *
   * If labels are updated, the change will not be reflected in queries until
   * the next index time.
   *
   * Possible errors:
   *
   * * Returns NOT_FOUND if the Product does not exist.
   * * Returns INVALID_ARGUMENT if display_name is present in update_mask but is
   *   missing from the request or longer than 4096 characters.
   * * Returns INVALID_ARGUMENT if description is present in update_mask but is
   *   longer than 4096 characters.
   * * Returns INVALID_ARGUMENT if product_category is present in update_mask.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.vision.v1p4beta1.Product} request.product
   *   Required. The Product resource which replaces the one on the server.
   *   product.name is immutable.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The {@link google.protobuf.FieldMask|FieldMask} that specifies which fields
   *   to update.
   *   If update_mask isn't specified, all mutable fields are to be updated.
   *   Valid mask paths include `product_labels`, `display_name`, and
   *   `description`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProduct,
          | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IUpdateProductRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'product.name': request.product!.name || '',
    });
    this.initialize();
    return this._innerApiCalls.updateProduct(request, options, callback);
  }
  deleteProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Permanently deletes a product and its reference images.
   *
   * Metadata of the product and all its images will be deleted right away, but
   * search queries against ProductSets containing the product may still work
   * until all related caches are refreshed.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of product to delete.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteProduct(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IDeleteProductRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.deleteProduct(request, options, callback);
  }
  createReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      | protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates and returns a new ReferenceImage resource.
   *
   * The `bounding_poly` field is optional. If `bounding_poly` is not specified,
   * the system will try to detect regions of interest in the image that are
   * compatible with the product_category on the parent product. If it is
   * specified, detection is ALWAYS skipped. The system converts polygons into
   * non-rotated rectangles.
   *
   * Note that the pipeline will resize the image if the image resolution is too
   * large to process (above 50MP).
   *
   * Possible errors:
   *
   * * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096
   *   characters.
   * * Returns INVALID_ARGUMENT if the product does not exist.
   * * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing
   *   compatible with the parent product's product_category is detected.
   * * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the product in which to create the reference
   *   image.
   *
   *   Format is
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
   * @param {google.cloud.vision.v1p4beta1.ReferenceImage} request.referenceImage
   *   Required. The reference image to create.
   *   If an image ID is specified, it is ignored.
   * @param {string} request.referenceImageId
   *   A user-supplied resource id for the ReferenceImage to be added. If set,
   *   the server will attempt to use this value as the resource id. If it is
   *   already in use, an error is returned with code ALREADY_EXISTS. Must be at
   *   most 128 characters long. It cannot contain the character `/`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
          | protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      | protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.ICreateReferenceImageRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.createReferenceImage(request, options, callback);
  }
  deleteReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Permanently deletes a reference image.
   *
   * The image metadata will be deleted right away, but search queries
   * against ProductSets containing the image may still work until all related
   * caches are refreshed.
   *
   * The actual image files are not deleted from Google Cloud Storage.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the reference image to delete.
   *
   *   Format is:
   *
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IDeleteReferenceImageRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.deleteReferenceImage(request, options, callback);
  }
  getReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      | protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets information associated with a ReferenceImage.
   *
   * Possible errors:
   *
   * * Returns NOT_FOUND if the specified image does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the ReferenceImage to get.
   *
   *   Format is:
   *
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getReferenceImage(
    request: protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
          | protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      | protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IGetReferenceImageRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.getReferenceImage(request, options, callback);
  }
  addProductToProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  addProductToProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Adds a Product to the specified ProductSet. If the Product is already
   * present, no change is made.
   *
   * One Product can be added to at most 100 ProductSets.
   *
   * Possible errors:
   *
   * * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for the ProductSet to modify.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
   * @param {string} request.product
   *   Required. The resource name for the Product to be added to this ProductSet.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  addProductToProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IAddProductToProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.addProductToProductSet(
      request,
      options,
      callback
    );
  }
  removeProductFromProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  removeProductFromProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Removes a Product from the specified ProductSet.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for the ProductSet to modify.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
   * @param {string} request.product
   *   Required. The resource name for the Product to be removed from this
   *   ProductSet.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  removeProductFromProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.vision.v1p4beta1.IRemoveProductFromProductSetRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.removeProductFromProductSet(
      request,
      options,
      callback
    );
  }

  importProductSets(
    request: protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsResponse,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  importProductSets(
    request: protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsResponse,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Asynchronous API that imports a list of reference images to specified
   * product sets based on a list of image information.
   *
   * The {@link google.longrunning.Operation|google.longrunning.Operation} API can be
   * used to keep track of the progress and results of the request.
   * `Operation.metadata` contains `BatchOperationMetadata`. (progress)
   * `Operation.response` contains `ImportProductSetsResponse`. (results)
   *
   * The input source of this method is a csv file on Google Cloud Storage.
   * For the format of the csv file please see
   * {@link google.cloud.vision.v1p4beta1.ImportProductSetsGcsSource.csv_file_uri|ImportProductSetsGcsSource.csv_file_uri}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which the ProductSets should be imported.
   *
   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.
   * @param {google.cloud.vision.v1p4beta1.ImportProductSetsInputConfig} request.inputConfig
   *   Required. The input content for the list of requests.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  importProductSets(
    request: protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsResponse,
            protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
          >,
          protosTypes.google.longrunning.IOperation | undefined,
          {} | undefined
        >,
    callback?: Callback<
      LROperation<
        protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsResponse,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): Promise<
    [
      LROperation<
        protosTypes.google.cloud.vision.v1p4beta1.IImportProductSetsResponse,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.importProductSets(request, options, callback);
  }
  purgeProducts(
    request: protosTypes.google.cloud.vision.v1p4beta1.IPurgeProductsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  purgeProducts(
    request: protosTypes.google.cloud.vision.v1p4beta1.IPurgeProductsRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Asynchronous API to delete all Products in a ProductSet or all Products
   * that are in no ProductSet.
   *
   * If a Product is a member of the specified ProductSet in addition to other
   * ProductSets, the Product will still be deleted.
   *
   * It is recommended to not delete the specified ProductSet until after this
   * operation has completed. It is also recommended to not add any of the
   * Products involved in the batch delete to a new ProductSet while this
   * operation is running because those Products may still end up deleted.
   *
   * It's not possible to undo the PurgeProducts operation. Therefore, it is
   * recommended to keep the csv files used in ImportProductSets (if that was
   * how you originally built the Product Set) before starting PurgeProducts, in
   * case you need to re-import the data after deletion.
   *
   * If the plan is to purge all of the Products from a ProductSet and then
   * re-use the empty ProductSet to re-import new Products into the empty
   * ProductSet, you must wait until the PurgeProducts operation has finished
   * for that ProductSet.
   *
   * The {@link google.longrunning.Operation|google.longrunning.Operation} API can be
   * used to keep track of the progress and results of the request.
   * `Operation.metadata` contains `BatchOperationMetadata`. (progress)
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.vision.v1p4beta1.ProductSetPurgeConfig} request.productSetPurgeConfig
   *   Specify which ProductSet contains the Products to be deleted.
   * @param {boolean} request.deleteOrphanProducts
   *   If delete_orphan_products is true, all Products that are not in any
   *   ProductSet will be deleted.
   * @param {string} request.parent
   *   Required. The project and location in which the Products should be deleted.
   *
   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.
   * @param {boolean} request.force
   *   The default value is false. Override this value to true to actually perform
   *   the purge.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  purgeProducts(
    request: protosTypes.google.cloud.vision.v1p4beta1.IPurgeProductsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protosTypes.google.protobuf.IEmpty,
            protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
          >,
          protosTypes.google.longrunning.IOperation | undefined,
          {} | undefined
        >,
    callback?: Callback<
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): Promise<
    [
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.cloud.vision.v1p4beta1.IBatchOperationMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.purgeProducts(request, options, callback);
  }
  listProductSets(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsResponse
    ]
  >;
  listProductSets(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsResponse
    >
  ): void;
  /**
   * Lists ProductSets in an unspecified order.
   *
   * Possible errors:
   *
   * * Returns INVALID_ARGUMENT if page_size is greater than 100, or less
   *   than 1.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project from which ProductSets should be listed.
   *
   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   The next_page_token returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListProductSetsRequest]{@link google.cloud.vision.v1p4beta1.ListProductSetsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListProductSetsResponse]{@link google.cloud.vision.v1p4beta1.ListProductSetsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listProductSets(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProductSet[],
          protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest | null,
          protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProductSet[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listProductSets(request, options, callback);
  }

  /**
   * Equivalent to {@link listProductSets}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listProductSets} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project from which ProductSets should be listed.
   *
   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   The next_page_token returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet} on 'data' event.
   */
  listProductSetsStream(
    request?: protosTypes.google.cloud.vision.v1p4beta1.IListProductSetsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listProductSets.createStream(
      this._innerApiCalls.listProductSets as gax.GaxCall,
      request,
      callSettings
    );
  }
  listProducts(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsResponse
    ]
  >;
  listProducts(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsResponse
    >
  ): void;
  /**
   * Lists products in an unspecified order.
   *
   * Possible errors:
   *
   * * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project OR ProductSet from which Products should be listed.
   *
   *   Format:
   *   `projects/PROJECT_ID/locations/LOC_ID`
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   The next_page_token returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListProductsRequest]{@link google.cloud.vision.v1p4beta1.ListProductsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListProductsResponse]{@link google.cloud.vision.v1p4beta1.ListProductsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listProducts(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
          protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest | null,
          protosTypes.google.cloud.vision.v1p4beta1.IListProductsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listProducts(request, options, callback);
  }

  /**
   * Equivalent to {@link listProducts}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listProducts} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project OR ProductSet from which Products should be listed.
   *
   *   Format:
   *   `projects/PROJECT_ID/locations/LOC_ID`
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   The next_page_token returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product} on 'data' event.
   */
  listProductsStream(
    request?: protosTypes.google.cloud.vision.v1p4beta1.IListProductsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listProducts.createStream(
      this._innerApiCalls.listProducts as gax.GaxCall,
      request,
      callSettings
    );
  }
  listReferenceImages(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage[],
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesResponse
    ]
  >;
  listReferenceImages(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage[],
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesResponse
    >
  ): void;
  /**
   * Lists reference images.
   *
   * Possible errors:
   *
   * * Returns NOT_FOUND if the parent product does not exist.
   * * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less
   *   than 1.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the product containing the reference images.
   *
   *   Format is
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   A token identifying a page of results to be returned. This is the value
   *   of `nextPageToken` returned in a previous reference image list request.
   *
   *   Defaults to the first page if not specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListReferenceImagesRequest]{@link google.cloud.vision.v1p4beta1.ListReferenceImagesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListReferenceImagesResponse]{@link google.cloud.vision.v1p4beta1.ListReferenceImagesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listReferenceImages(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage[],
          protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest | null,
          protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage[],
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IReferenceImage[],
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listReferenceImages(request, options, callback);
  }

  /**
   * Equivalent to {@link listReferenceImages}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listReferenceImages} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the product containing the reference images.
   *
   *   Format is
   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   A token identifying a page of results to be returned. This is the value
   *   of `nextPageToken` returned in a previous reference image list request.
   *
   *   Defaults to the first page if not specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage} on 'data' event.
   */
  listReferenceImagesStream(
    request?: protosTypes.google.cloud.vision.v1p4beta1.IListReferenceImagesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listReferenceImages.createStream(
      this._innerApiCalls.listReferenceImages as gax.GaxCall,
      request,
      callSettings
    );
  }
  listProductsInProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetResponse
    ]
  >;
  listProductsInProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetResponse
    >
  ): void;
  /**
   * Lists the Products in a ProductSet, in an unspecified order. If the
   * ProductSet does not exist, the products field of the response will be
   * empty.
   *
   * Possible errors:
   *
   * * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The ProductSet resource for which to retrieve Products.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   The next_page_token returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListProductsInProductSetRequest]{@link google.cloud.vision.v1p4beta1.ListProductsInProductSetRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListProductsInProductSetResponse]{@link google.cloud.vision.v1p4beta1.ListProductsInProductSetResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listProductsInProductSet(
    request: protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
          protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest | null,
          protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.vision.v1p4beta1.IProduct[],
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest | null,
      protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.listProductsInProductSet(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to {@link listProductsInProductSet}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listProductsInProductSet} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The ProductSet resource for which to retrieve Products.
   *
   *   Format is:
   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default 10, maximum 100.
   * @param {string} request.pageToken
   *   The next_page_token returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product} on 'data' event.
   */
  listProductsInProductSetStream(
    request?: protosTypes.google.cloud.vision.v1p4beta1.IListProductsInProductSetRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listProductsInProductSet.createStream(
      this._innerApiCalls.listProductsInProductSet as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this._pathTemplates.locationPathTemplate.render({
      project,
      location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this._pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this._pathTemplates.locationPathTemplate.match(locationName)
      .location;
  }

  /**
   * Return a fully-qualified product resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} product
   * @returns {string} Resource name string.
   */
  productPath(project: string, location: string, product: string) {
    return this._pathTemplates.productPathTemplate.render({
      project,
      location,
      product,
    });
  }

  /**
   * Parse the project from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProductName(productName: string) {
    return this._pathTemplates.productPathTemplate.match(productName).project;
  }

  /**
   * Parse the location from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProductName(productName: string) {
    return this._pathTemplates.productPathTemplate.match(productName).location;
  }

  /**
   * Parse the product from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the product.
   */
  matchProductFromProductName(productName: string) {
    return this._pathTemplates.productPathTemplate.match(productName).product;
  }

  /**
   * Return a fully-qualified productSet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} product_set
   * @returns {string} Resource name string.
   */
  productSetPath(project: string, location: string, productSet: string) {
    return this._pathTemplates.productSetPathTemplate.render({
      project,
      location,
      product_set: productSet,
    });
  }

  /**
   * Parse the project from ProductSet resource.
   *
   * @param {string} productSetName
   *   A fully-qualified path representing ProductSet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProductSetName(productSetName: string) {
    return this._pathTemplates.productSetPathTemplate.match(productSetName)
      .project;
  }

  /**
   * Parse the location from ProductSet resource.
   *
   * @param {string} productSetName
   *   A fully-qualified path representing ProductSet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProductSetName(productSetName: string) {
    return this._pathTemplates.productSetPathTemplate.match(productSetName)
      .location;
  }

  /**
   * Parse the product_set from ProductSet resource.
   *
   * @param {string} productSetName
   *   A fully-qualified path representing ProductSet resource.
   * @returns {string} A string representing the product_set.
   */
  matchProductSetFromProductSetName(productSetName: string) {
    return this._pathTemplates.productSetPathTemplate.match(productSetName)
      .product_set;
  }

  /**
   * Return a fully-qualified referenceImage resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} product
   * @param {string} reference_image
   * @returns {string} Resource name string.
   */
  referenceImagePath(
    project: string,
    location: string,
    product: string,
    referenceImage: string
  ) {
    return this._pathTemplates.referenceImagePathTemplate.render({
      project,
      location,
      product,
      reference_image: referenceImage,
    });
  }

  /**
   * Parse the project from ReferenceImage resource.
   *
   * @param {string} referenceImageName
   *   A fully-qualified path representing ReferenceImage resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReferenceImageName(referenceImageName: string) {
    return this._pathTemplates.referenceImagePathTemplate.match(
      referenceImageName
    ).project;
  }

  /**
   * Parse the location from ReferenceImage resource.
   *
   * @param {string} referenceImageName
   *   A fully-qualified path representing ReferenceImage resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReferenceImageName(referenceImageName: string) {
    return this._pathTemplates.referenceImagePathTemplate.match(
      referenceImageName
    ).location;
  }

  /**
   * Parse the product from ReferenceImage resource.
   *
   * @param {string} referenceImageName
   *   A fully-qualified path representing ReferenceImage resource.
   * @returns {string} A string representing the product.
   */
  matchProductFromReferenceImageName(referenceImageName: string) {
    return this._pathTemplates.referenceImagePathTemplate.match(
      referenceImageName
    ).product;
  }

  /**
   * Parse the reference_image from ReferenceImage resource.
   *
   * @param {string} referenceImageName
   *   A fully-qualified path representing ReferenceImage resource.
   * @returns {string} A string representing the reference_image.
   */
  matchReferenceImageFromReferenceImageName(referenceImageName: string) {
    return this._pathTemplates.referenceImagePathTemplate.match(
      referenceImageName
    ).reference_image;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.productSearchStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
